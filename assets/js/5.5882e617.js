(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{158:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"javascript函数式编程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript函数式编程","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript函数式编程")]),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#单元测试"}},[a._v("单元测试")]),r("ul",[r("li",[r("a",{attrs:{href:"#why"}},[a._v("why?")])]),r("li",[r("a",{attrs:{href:"#单元测试"}},[a._v("单元测试")])]),r("li",[r("a",{attrs:{href:"#单元测试框架"}},[a._v("单元测试框架")])]),r("li",[r("a",{attrs:{href:"#运行流程"}},[a._v("运行流程")])]),r("li",[r("a",{attrs:{href:"#自动化单元测试"}},[a._v("自动化单元测试")])]),r("li",[r("a",{attrs:{href:"#报告和单元测试覆盖率检查"}},[a._v("报告和单元测试覆盖率检查")])])])]),r("li",[r("a",{attrs:{href:"#性能测试"}},[a._v("性能测试")]),r("ul",[r("li",[r("a",{attrs:{href:"#基准测试"}},[a._v("基准测试")])]),r("li",[r("a",{attrs:{href:"#压力测试"}},[a._v("压力测试")])])])]),r("li",[r("a",{attrs:{href:"#安全测试"}},[a._v("安全测试")])]),r("li",[r("a",{attrs:{href:"#功能测试"}},[a._v("功能测试")]),r("ul",[r("li",[r("a",{attrs:{href:"#用户真实性检查"}},[a._v("用户真实性检查")])])])]),r("li",[r("a",{attrs:{href:"#jslint与jshint"}},[a._v("JsLint与JsHint")])])])]),r("p"),r("h2",{attrs:{id:"单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 单元测试")]),r("h3",{attrs:{id:"why"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#why","aria-hidden":"true"}},[a._v("#")]),a._v(" why?")]),r("ul",[r("li",[a._v("正确性：测试可以验证代码的正确性，在上线前做到心里有底")]),r("li",[a._v("自动化：当然手工也可以测试，通过console可以打印出内部信息，但是这是一次性的事情，下次测试还需要从头来过，效率不能得到保证。通过编写测试用例，可以做到一次编写，多次运行")]),r("li",[a._v("解释性：测试用例用于测试接口、模块的重要性，那么在测试用例中就会涉及如何使用这些API。其他开发人员如果要使用这些API，那阅读测试用例是一种很好地途径，有时比文档说明更清晰")]),r("li",[a._v("驱动开发，指导设计：代码被测试的前提是代码本身的可测试性，那么要保证代码的可测试性，就需要在开发中注意API的设计，TDD将测试前移就是起到这么一个作用")]),r("li",[a._v("保证重构：互联网行业产品迭代速度很快，迭代后必然存在代码重构的过程，那怎么才能保证重构后代码的质量呢？有测试用例做后盾，就可以大胆的进行重构")])]),r("h3",{attrs:{id:"单元测试-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 单元测试")]),r("ul",[r("li",[a._v("目的：单元测试能够让开发者明确知道代码结果")]),r("li",[a._v("原则：单一职责、接口抽象、层次分离")]),r("li",[a._v("断言库：保证最小单元是否正常运行检测方法")]),r("li",[a._v("测试风格：测试驱动开发(Test-Driven Development,TDD)、(Behavior Driven Development,BDD)行为驱动开发均是敏捷开发方法论。TDD关注所有的功能是否被实现(每一个功能都必须有对应的测试用例)，suite配合test利用assert('tobi' == user.name);BDD关注整体行为是否符合整体预期,编写的每一行代码都有目的提供一个全面的测试用例集。expect/should,describe配合it利用自然语言expect(1).toEqual(fn())执行结果。")])]),r("h3",{attrs:{id:"单元测试框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单元测试框架","aria-hidden":"true"}},[a._v("#")]),a._v(" 单元测试框架")]),r("ul",[r("li",[a._v("better-assert(TDD断言库Github 190star 19fork)")]),r("li",[a._v("should.js(BDD断言库Github 2295star 194fork)")]),r("li",[a._v("expect.js(BDD断言库Github 1391star 162fork)")]),r("li",[a._v("chai.js(TDD BDD双模Github 2823star 271fork)")]),r("li",[a._v("Jasmine.js(BDD Github10723star1680fork)")]),r("li",[a._v("Node.js本身集成 require(“assert”);")]),r("li",[a._v("Intern 更是一个大而全的单元测试框架")]),r("li",[a._v("QUnit 一个游离在jQuery左右的测试框架")]),r("li",[a._v("Macaca 一套完整的自动化测试解决方案 国产神器来自阿里巴巴")])]),r("h3",{attrs:{id:"运行流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行流程","aria-hidden":"true"}},[a._v("#")]),a._v(" 运行流程")]),r("p",[a._v("每一个测试用例组通过describe进行设置"),r("br"),a._v("\n图1")]),r("ol",[r("li",[a._v("before单个测试用例(it)开始前")]),r("li",[a._v("beforeEach每一个测试用例开始前")]),r("li",[a._v("it定义测试用例 并利用断言库进行设置chai如：expect(x).to.equal(true);异步mocha")]),r("li",[a._v("以上专业术语叫mock")])]),r("h3",{attrs:{id:"自动化单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动化单元测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 自动化单元测试")]),r("p",[a._v("karma 自动化runner集成PhantomJS无刷新")]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("npm install -g karma\nnpm install karma-cli —save-dev\nnpm install karma-chrome-launcher —save-dev\nnpm install karma-phantomjs-launcher —save-dev\nnpm install karma-mocha —save-dev\nnpm install karma-chai —save-dev\n")])])]),r("h3",{attrs:{id:"报告和单元测试覆盖率检查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#报告和单元测试覆盖率检查","aria-hidden":"true"}},[a._v("#")]),a._v(" 报告和单元测试覆盖率检查")]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("npm install karma-coverage —save-dev\ncoverageReporter: { type: 'html',dir:'coverage/' } //配制代码覆盖测试率生成结果\n")])])]),r("p",[a._v("图2")]),r("h2",{attrs:{id:"性能测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 性能测试")]),r("h3",{attrs:{id:"基准测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基准测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 基准测试")]),r("ul",[r("li",[a._v("面向切面编程AOP无侵入式统计")]),r("li",[a._v("Benchmark基准测试方法，它并不是简单地统计执行多少次测试代码后对比时间，它对测试有着严密的抽样过程。执行多少次取决于采样到的数据能否完成统计。根据统计次数计算方差。")])]),r("h3",{attrs:{id:"压力测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#压力测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 压力测试")]),r("ul",[r("li",[a._v("对网络接口做压力测试需要检查的几个常用指标有吞吐率、响应时间和并发数，这些指标反映了服务器并发处理能力。")]),r("li",[a._v("PV网站当日访问人数 UV独立访问人数。PV每天几十万甚至上百万就需要考虑压力测试。换算公式QPS=PV/t ps：1000000/10"),r("em",[a._v("60")]),a._v("60=27.7(100万请求集中在10个小时，服务器每秒处理27.7个业务请求)")]),r("li",[a._v("常用的压力测试工具是ab、siege、http_load。")]),r("li",[a._v("ab -c 100 -n 100 http://localhost:8001 每秒持续发出28个请求"),r("br"),a._v("\nRequest per second 表示服务器每秒处理请求数 即为QPS"),r("br"),a._v("\nFailed requests 表示此次请求失败的请求数 理论上压测值越大增加"),r("br"),a._v("\nConnection Times 连接时间，它包括客户端向服务器端建立连接、服务器端处理请求、等待报文响应的过程")])]),r("h2",{attrs:{id:"安全测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安全测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 安全测试")]),r("p",[a._v("###安全漏洞检查")]),r("ol",[r("li",[a._v("XSS")]),r("li",[a._v("SQL")]),r("li",[a._v("CSRF")])]),r("h2",{attrs:{id:"功能测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#功能测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 功能测试")]),r("h3",{attrs:{id:"用户真实性检查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用户真实性检查","aria-hidden":"true"}},[a._v("#")]),a._v(" 用户真实性检查")]),r("ul",[r("li",[a._v("selenium-webdriver")]),r("li",[a._v("protractor selenium-standalone")]),r("li",[a._v("http://webdriver.io/ WEBDRIVERI/O")]),r("li",[a._v("冒烟测试 SmokeTest 自由测试的一种，找到一个BUG开发修复，然后专门针对此BUG,优点节省生煎防止build失败，缺点是覆盖率极低。")]),r("li",[a._v("回归测试 修改一处对整体功能全部测试，一般配合自动化测试。")])]),r("h2",{attrs:{id:"jslint与jshint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jslint与jshint","aria-hidden":"true"}},[a._v("#")]),a._v(" JsLint与JsHint")]),r("ul",[r("li",[a._v("目的：检测JavaScript代码标准")]),r("li",[a._v("原因：JavaScript代码诡异，保证团队代码规范")]),r("li",[a._v("搭配自动化任务管理工具完善自动化测试gruntjshint、grunt-jslint")])]),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[a._v("TIP")]),r("p",[a._v("lint：http://www.jslint.com/"),r("br"),a._v("\nhint: http://www.jshint.com/")])])])}],!1,null,null,null);t.default=s.exports}}]);