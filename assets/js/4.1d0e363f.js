(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{159:function(a,t,n){"use strict";n.r(t);var e=n(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"javascript函数式编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript函数式编程","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript函数式编程")]),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#函数式编程思维"}},[a._v("函数式编程思维")]),n("ul",[n("li",[n("a",{attrs:{href:"#范畴论"}},[a._v("范畴论")])]),n("li",[n("a",{attrs:{href:"#函数式编程基础理论"}},[a._v("函数式编程基础理论")])])])]),n("li",[n("a",{attrs:{href:"#函数式编程常用核心概念"}},[a._v("函数式编程常用核心概念")]),n("ul",[n("li",[n("a",{attrs:{href:"#一些专业术语（纯函数、函数的柯里化、函数组合、pointfree、声明式与命令式代码、惰性求值）"}},[a._v("一些专业术语（纯函数、函数的柯里化、函数组合、PointFree、声明式与命令式代码、惰性求值）")])]),n("li",[n("a",{attrs:{href:"#更多的专业术语（高阶函数、尾调用优化、闭包、容器、functor、错误处理-either-ap、io、monad）"}},[a._v("更多的专业术语（高阶函数、尾调用优化、闭包、容器、Functor、错误处理/Either/AP、IO、Monad）")])])])]),n("li",[n("a",{attrs:{href:"#当下函数式编程最热的库"}},[a._v("当下函数式编程最热的库")]),n("ul",[n("li",[n("a",{attrs:{href:"#rxjs"}},[a._v("RxJS")])]),n("li",[n("a",{attrs:{href:"#cyclejs"}},[a._v("cycleJS")])]),n("li",[n("a",{attrs:{href:"#lodashjs、lazy-惰性求值"}},[a._v("lodashJS、lazy(惰性求值)")])]),n("li",[n("a",{attrs:{href:"#underscorejs"}},[a._v("underscoreJS")])]),n("li",[n("a",{attrs:{href:"#ramdajs"}},[a._v("ramdajs")])])])]),n("li",[n("a",{attrs:{href:"#函数式编程的实际应用场景"}},[a._v("函数式编程的实际应用场景")]),n("ul",[n("li",[n("a",{attrs:{href:"#易调试、热部署、并发"}},[a._v("易调试、热部署、并发")])]),n("li",[n("a",{attrs:{href:"#单元测试"}},[a._v("单元测试")])]),n("li",[n("a",{attrs:{href:"#小结与补充"}},[a._v("小结与补充")])])])])])]),n("p"),n("h2",{attrs:{id:"函数式编程思维"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程思维","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数式编程思维")]),n("h3",{attrs:{id:"范畴论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#范畴论","aria-hidden":"true"}},[a._v("#")]),a._v(" 范畴论")]),n("ul",[n("li",[a._v("函数式编程是范畴论的数学分支，是一门很复杂的数学，认为世界上所有概念体系都可以抽象出一个个范畴。")]),n("li",[a._v("彼此之间存在某种关系概念、事物、对象等等，都构成范畴。任何事物只要找出他们之间的关系，就能定义")]),n("li",[a._v('箭头表示范畴成员之间的关系，正式的名称叫做"态射"（morphism）。范畴论认为，同一个范畴的所有成员，就是不同状态的"变形（transformation）。通过"态射"，一个成员可以变形成另一个成员。')])]),n("p",[a._v("图1")]),n("ol",[n("li",[a._v("所有成员都是一个集合")]),n("li",[a._v("变形关系是函数")])]),n("h3",{attrs:{id:"函数式编程基础理论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程基础理论","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数式编程基础理论")]),n("ul",[n("li",[a._v("函数式编程（Functional Programming）其实相对于计算机的历史而言是一个非常古老的概念，甚至早于第一台计算机的诞生。函数式编程的基础模型来源于 λ (Lambda x=>x*2)演算，而 λ 演算并非设计于在计算机上执行，它是在 20 世纪三十年代引入的一套用于研究函数定义、函数应用和递归的形式系统。")]),n("li",[a._v("函数式编程不是用函数来编程，也不是传统的面向过程编程。主旨在于将复杂的函数符合成简单的函数（计算理论，或者递归论，或者拉姆达演算）。运算过程尽量写成一系列嵌套的函数调用。")]),n("li",[a._v("JavaScript 是披着 C 外衣的 Lisp。")]),n("li",[a._v("真正的火热是随着React的高阶函数而逐步升温。")]),n("li",[a._v("函数是一等公民。所谓”第一等公民”（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数,传入另一个函数，或者作为别的函数的返回值。")]),n("li",[a._v("不可改变量。在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了：在函数式编程中变量仅仅代表某个表达式。这里所说的’变量’是不能被修改的。所有的变量只能被赋一次初值")]),n("li",[a._v("map & reduce他们是最常用的函数式编程的方法")])]),n("p",[a._v("小结：")]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),n("p",[a._v("1.函数是“一等公民”"),n("br"),a._v("\n2.只用“表达式”，不用“语句”"),n("br"),a._v("\n3.没有“副作用”"),n("br"),a._v("\n4.不修改状态"),n("br"),a._v("\n5.引用透明（函数运行只靠参数）")])]),n("h2",{attrs:{id:"函数式编程常用核心概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程常用核心概念","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数式编程常用核心概念")]),n("h3",{attrs:{id:"一些专业术语（纯函数、函数的柯里化、函数组合、pointfree、声明式与命令式代码、惰性求值）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些专业术语（纯函数、函数的柯里化、函数组合、pointfree、声明式与命令式代码、惰性求值）","aria-hidden":"true"}},[a._v("#")]),a._v(" 一些专业术语（纯函数、函数的柯里化、函数组合、PointFree、声明式与命令式代码、惰性求值）")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("1.纯函数\n2.函数的柯里化\n3.函数组合\n4.PointFree\n5.声明式与命令式代码\n6.惰性求值\n")])])]),n("p",[a._v("1、纯函数"),n("br"),a._v("\n对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var xs = [1,2,3,4,5];// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的\nxs.slice(0,3);\nxs.slice(0,3);\nxs.splice(0,3);\nxs.splice(0,3);\n")])])]),n("p",[a._v("优缺点：")]),n("ul",[n("li",[a._v("缺1")]),n("li",[a._v("缺1")])]),n("p",[a._v("2、函数的柯里化"),n("br"),a._v("\n传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n我们一起来用柯里化来改他：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var checkage = min => (age => age > min);\nvar checkage18 = checkage(18);\ncheckage18(20);\n")])])]),n("p",[a._v("函数的柯里化code")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 柯⾥化之前\nfunction add(x, y) {\n    return x + y;\n}\nadd(1, 2) // 3\n// 柯⾥化之后\nfunction addX(y) {\n    return function (x) {\n        return x + y;\n    };\n}\naddX(2)(1) // 3\n")])])]),n("p",[a._v("优缺点")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('import { curry } from \'lodash\';\nvar match = curry((reg, str) => str.match(reg));\nvar filter = curry((f, arr) => arr.filter(f));\nvar haveSpace = match(/\\s+/g);\n//haveSpace(“ffffffff”);\n//haveSpace(“a b");\n//filter(haveSpace, ["abcdefg", "Hello World"]);\nfilter(haveSpace)(["abcdefg", "Hello World"])\n')])])]),n("p",[a._v("事实上柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲， 这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。")]),n("p",[a._v("3、函数组合"),n("br"),a._v("\n纯函数以及如何把它柯里化写出的洋葱代码 h(g(f(x)))，为了解决函数嵌套的问题，我们需要用到“函数组合”：我们一起来用柯里化来改他，让多个函数像拼积木一样")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("const compose = (f, g) => (x => f(g(x)));\nvar first = arr => arr[0];\nvar reverse = arr => arr.reverse();\nvar last = compose(first, reverse);\nlast([1,2,3,4,5]);\n")])])]),n("p",[a._v("图2")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("compose(f,compose(g,h))\ncompose(compose(f,g),h)\ncompose(f,g,h)\n")])])]),n("p",[a._v("4、PointFree")]),n("ul",[n("li",[a._v("把一些对象自带的方法转化成纯函数,不要命名转瞬即逝的中间变量。")]),n("li",[a._v("这个函数中，我们使用了 str 作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外是毫无意义的。")])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("const f = str => str.toUpperCase().split(' ');\n")])])]),n("p",[a._v("优缺点")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var toUpperCase = word => word.toUpperCase();\nvar split = x => (str => str.split(x));\nvar f = compose(split(' '), toUpperCase);\nf(\"abcd efgh\");\n")])])]),n("p",[a._v("这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。")]),n("p",[a._v("5、声明式与命令式代码"),n("br"),a._v("\n命令式代码的意思就是，我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//命令式\nlet CEOs = [];\nfor(var i = 0; i < companies.length; i++)\n    CEOs.push(companies[i].CEO)\n}\n//声明式\nlet CEOs = companies.map(c => c.CEO);\n")])])]),n("p",[a._v("优缺点")]),n("ul",[n("li",[a._v("函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。优化代码时，目光只需要集中在这些稳定坚固的函数内部即可。")]),n("li",[a._v("相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于程序员的心智来说是极大的负担。")])]),n("p",[a._v("6、惰性求值"),n("br"),a._v("\n在指令式语言中以下代码会按顺序执行，由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function somewhatLongOperation1(){somewhatLongOperation1}\n")])])]),n("h3",{attrs:{id:"更多的专业术语（高阶函数、尾调用优化、闭包、容器、functor、错误处理-either-ap、io、monad）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更多的专业术语（高阶函数、尾调用优化、闭包、容器、functor、错误处理-either-ap、io、monad）","aria-hidden":"true"}},[a._v("#")]),a._v(" 更多的专业术语（高阶函数、尾调用优化、闭包、容器、Functor、错误处理/Either/AP、IO、Monad）")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("7.高阶函数\n8.尾调用优化\n9.闭包\n10.容器、Functor\n11.错误处理、Either、AP\n12.IO\n13.Monad\n")])])]),n("p",[a._v("7、高阶函数"),n("br"),a._v("\n函数当参数，把传入的函数做一个封装，然后返回这个封装函数,达到更高程度的抽象。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("//命令式\nvar add = function(a,b){ \n    return a + b;\n};\nfunction math(func,array){ \n    return func(array[0],array[1]);\n}\nmath(add,[1,2]); // 3\n")])])]),n("p",[a._v("8、尾调用优化"),n("br"),a._v("\n指函数内部的最后一个动作是函数调用。该调用的返回值，直接返回给函数。函数调用自身，称为递归。如果尾调用自身，就称为尾递归。递归需要保存大量的调用记录，很容易发生栈溢出错误，如果使用尾递归优化，将递归变为循环，那么只需要保存一个调用记录，这样就不会发生栈溢出错误了。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 不是尾递归，无法优化\nfunction factorial(n) { \n    if (n === 1) return 1;\n        return n * factorial(n - 1);\n}\nfunction factorial(n, total) { \n    if (n === 1) return total;\n        return factorial(n - 1, n * total);\n} //ES6强制使用尾递归\n")])])]),n("p",[a._v("普通递归时，内存需要记录调用的堆栈所出的深度和位置信息。在最底层计算返回值，再根据记录的信息，跳回上一层级计算，然后再跳回更高一层，依次运行，直到最外层的调用函数。在cpu计算和内存会消耗很多，而且当深度过大时，会出现堆栈溢出")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function sum(n) { \n    if (n === 1) return 1;\n        return n + sum(n - 1);\n}\n//->\nsum(5)\n(5 + sum(4))\n(5 + (4 + sum(3)))\n(5 + (4 + (3 + sum(2))))\n(5 + (4 + (3 + (2 + sum(1)))))\n(5 + (4 + (3 + (2 + 1))))\n(5 + (4 + (3 + 3)))\n(5 + (4 + 6))\n(5 + 10)\n15\n")])])]),n("p",[a._v("整个计算过程是线性的，调用一次sum(x, total)后，会进入下一个栈，相关的数据信息和跟随进入，不再放在堆栈上保存。当计算完最后的值之后，直接返回到最上层的sum(5,0)。这能有效的防止堆栈溢出。在ECMAScript 6，我们将迎来尾递归优化，通过尾递归优化，javascript代码在解释成机器码的时候，将会向while看起，也就是说，同时拥有数学表达能力和while的效能。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function sum(x, total) {\n    if (x === 1) {\n        return x + total;\n    }\n    return sum(x - 1, x + total);\n}\nsum(5, 0)\nsum(4, 5)\nsum(3, 9)\nsum(2, 12)\nsum(1, 14)\n15\n")])])]),n("p",[a._v("9、闭包"),n("br"),a._v("\n如下例子，虽然外层的 makePowerFn 函数执行完毕，栈上的调用帧被释放，但是堆上的作用域并不被释放，因此 power 依旧可以被 powerFn 函数访问，这样就形成了闭包")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function makePowerFn(power) {\n    function powerFn(base) {\n        return Math.pow(base, power);\n    }\n    return powerFn;\n}\nvar square = makePowerFn(2);\nsquare(3); // 9\n")])])]),n("p",[a._v("10、容器、Functor"),n("br"),a._v("\n范畴与容器")]),n("ul",[n("li",[a._v("我们可以把”范畴”想象成是一个容器，里面包含两样东西。值（value）、值的变形关系，也就是函数。")]),n("li",[a._v("范畴论使用函数，表达范畴之间的关系。")]),n("li",[a._v('伴随着范畴论的发展，就发展出一整套函数的运算方法。这套方法起初只用于数学运算，后来有人将它在计算机上实现了，就变成了今天的”函数式编程"。')]),n("li",[a._v("本质上，函数式编程只是范畴论的运算方法，跟数理逻辑、微积分、行列式是同一类东西，都是数学方法，只是碰巧它能用来写程序。为什么函数式编程要求函数必须是纯的，不能有副作用？因为它是一种数学运算，原始目的就是求值，不做其他事情，否则就无法满足函数运算法则了。")]),n("li",[a._v("函数不仅可以用于同一个范畴之中值的转换，还可以用于将一个范畴转成另一个范畴。这就涉及到了函子（Functor）。")]),n("li",[a._v("函子是函数式编程里面最重要的数据类型，也是基本的运算单位和功能单位。它首先是一种范畴，也就是说，是一个容器，包含了值和变形关系。比较特殊的是，它的变形关系可以依次作用于每一个值，将当前容器变形成另一个容器")])]),n("p",[a._v("图3")]),n("p",[a._v("容器、Functor（函子）")]),n("ul",[n("li",[a._v("$(...) 返回的对象并不是一个原生的 DOM 对象，而是对于原生对象的一种封装，这在某种意义上就是一个“容器”（但它并不函数式）。")]),n("li",[a._v("Functor（函子）遵守一些特定规则的容器类型。")]),n("li",[a._v("Functor 是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力。把东西装进一个容器，只留出一个接口 map 给容器外的函数，map 一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由地选择何时何地如何操作这个函数，以致于拥有惰性求值、错误处理、异步调用等等非常牛掰的特性。")])]),n("p",[a._v("函子的代码实现")]),n("ul",[n("li",[a._v("任何具有map方法的数据结构，都可以当作函子的实现。")]),n("li",[a._v("Functor（函子）遵守一些特定规则的容器类型。")]),n("li",[a._v("Functor 是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力。把东西装进一个容器，只留出一个接口map 给容器外的函数，map 一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由地选择何时何地如何操作这个函数，以致于拥有惰性求值、错误处理、异步调用等等非常牛掰的特性。")])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var Container = function(x) {\n    this.__value = x;\n}\n//函数式编程一般约定，函子有一个of方法\nContainer.of = x => new Container(x);\n//Container.of(‘abcd’);\n//一般约定，函子的标志就是容器具有map方法。该方法将容器\n里面的每一个值，映射到另一个容器。\nContainer.prototype.map = function(f){\n    return Container.of(f(this.__value))\n}\nContainer.of(3)\n    .map(x => x + 1) //=> Container(4)\n    .map(x => 'Result is ' + x); //=> Container('Result is 4')\n")])])]),n("p",[a._v("map")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("class Functor {\n    constructor(val) {\n        this.val = val;\n    }\n    map(f) {\n        return new Functor(f(this.val));\n    }\n}\n(new Functor(2)).map(function (two) {\n    return two + 2;\n});\n// Functor(4)\n")])])]),n("p",[a._v("上面代码中，Functor是一个函子，它的map方法接受函数f作为参数，然后返回一个新的函子，里面包含的值是被f处理过的（f(this.val)）。"),n("br"),a._v("\n一般约定，函子的标志就是容器具有map方法。该方法将容器里面的每一个值，映射到另一个容器。"),n("br"),a._v("\n上面的例子说明，函数式编程里面的运算，都是通过函子完成，即运算不直接针对值，而是针对这个值的容器----函子。函子本身具有对外接口（map法），各种函数就是运算符，通过接口接入容器，引发容器里面的值的变形。"),n("br"),a._v("\n因此，学习函数式编程，实际上就是学习函子的各种运算。由于可以把运算方法封装在函子里面，所以又衍生出各种不同类型的函子，有多少种运算，就有多少种函子。函数式编程就变成了运用不同的函子，解决实际问题。")]),n("p",[a._v("of方法"),n("br"),a._v("\n你可能注意到了，上面生成新的函子的时候，用了\nnew命令。这实在太不像函数式编程了，因为new命令是\n面向对象编程的标志。\n函数式编程一般约定，函子有一个of方法，用来生成新\n的容器。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Functor.of = function(val) {\n    return new Functor(val);\n}; \nFunctor.of(2).map(function (two) {\n    return two + 2;\n});\n// Functor(4)\n")])])]),n("p",[a._v("Maybe函子"),n("br"),a._v("\n函子接受各种函数，处理容器内部的值。这里就有一个问题，容器内部的值可能是一个空值（比如null），而外部函数未必有处理空值的机制，如果传入空值，很可能就会出错。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Functor.of(null).map(function (s) {\n    return s.toUpperCase();\n});\n// TypeError\nclass Maybe extends Functor {\nmap(f) {\n    return this.val ? Maybe.of(f(this.val)) : Maybe.of(null);\n}\n}\nMaybe.of(null).map(function (s) {\n    return s.toUpperCase();\n});\n// Maybe(null)\nvar Maybe = function(x) {\n    this.__value = x;\n}\nMaybe.of = function(x) {\n    return new Maybe(x);\n}\nMaybe.prototype.map = function(f) {\n    return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this.__value));\n}\nMaybe.prototype.isNothing = function() {\n    return (this.__value === null || this.__value === undefined);\n}\n//新的容器我们称之为 Maybe（原型来自于Haskell）\n")])])]),n("p",[a._v("11、错误处理、Either、AP"),n("br"),a._v("\n错误处理、Either")]),n("ul",[n("li",[a._v("我们的容器能做的事情太少了，try/catch/throw 并不是“纯”的，因为它从外部接管了我们的函数，并且在这个函数出错时抛弃了它的返回值。")]),n("li",[a._v("Promise 是可以调用 catch 来集中处理错误的。")]),n("li",[a._v("事实上 Either 并不只是用来做错误处理的，它表示了逻辑或，范畴学里的 coproduc。")])]),n("p",[a._v("Either"),n("br"),a._v("\n条件运算if...else是最常见的运算之一，函数式编程里面，使用 Either 函子表达。Either 函子内部有两个值：左值（Left）和右值（Right）。右值是正常情况下使用的值，左值是右值不存在时使用的默认值。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("class Either extends Functor {\n    constructor(left, right) {\n        this.left = left;\n        this.right = right;\n    }\n    map(f) {\n        return this.right ?\n        Either.of(this.left, f(this.right)) :\n        Either.of(f(this.left), this.right);\n    }\n}\nEither.of = function (left, right) {\n    return new Either(left, right);\n};\nvar addOne = function (x) {\n    return x + 1;\n};\nEither.of(5, 6).map(addOne);\n// Either(5, 7);\nEither.of(1, null).map(addOne);\n// Either(2, null);\nEither\n    .of({address: 'xxx'}, currentUser.address)\n    .map(updateField);\n")])])]),n("p",[a._v("代替try...catch")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var Left = function(x) {\n    this.__value = x;\n}\nvar Right = function(x) {\n    this.__value = x;\n}\nLeft.of = function(x) {\n    return new Left(x);\n}\nRight.of = function(x) {\n    return new Right(x);\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("// 这⾥不同！！！\nLeft.prototype.map = function(f) {\n    return this;\n}\nRight.prototype.map = function(f) {\n    return Right.of(f(this.__value));\n}\n")])])]),n("p",[a._v("Left 和 Right 唯一的区别就在于 map 方法的实现，Right.map 的行为和我们之前提到的 map 函数一样。但是 Left.map 就很不同了：它不会对容器做任何事情，只是很简单地把这个容器拿进来又扔出去。这个特性意味着，Left 可以用来传递一个错误消息。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var getAge = user => user.age ? Right.of(user.age) :\nLeft.of(\"ERROR!\");\n\ngetAge({name: 'stark', age: '21'}).map(age => 'Age is ' + age);\n//=> Right('Age is 21')\n\ngetAge({name: 'stark'}).map(age => 'Age is ' + age);\n//=> Left('ERROR!')\n")])])]),n("p",[a._v("Left 可以让调用链中任意一环的错误立刻返回到调用链的尾部，这给我们错误处理带来了很大的方便，再也不用一层又一层的try/catch。")]),n("p",[a._v("AP因子"),n("br"),a._v("\n函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("class Ap extends Functor {\n    ap(F) {\n        return Ap.of(this.val(F.val));\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("class Ap extends Functor {\n    ap(F) {\n        return Ap.of(this.val(F.val));\n    }\n}\nAp.of(addTwo).ap(Functor.of(2))\n")])])]),n("p",[a._v("12、IO")]),n("ul",[n("li",[a._v("真正的程序总要去接触肮脏的世界。")])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function readLocalStorage(){\n    return window.localStorage;\n}\n")])])]),n("ul",[n("li",[a._v("IO 跟前面那几个 Functor 不同的地方在于，它的 __value 是一个函数。它把不纯的操作（比如 IO、网络请求、DOM）包裹到一个函数内，从而延迟这个操作的执行。所以我们认为，IO 包含的是被包裹的操作的返回值。")]),n("li",[a._v("IO其实也算是惰性求值。")]),n("li",[a._v("IO负责了调用链积累了很多很多不纯的操作，带来的复杂性和不可维护性")])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("import _ from 'lodash';\nvar compose = _.flowRight;\nvar IO = function(f) {\n    this.__value = f;\n}\nIO.of = x => new IO(_ => x);\nIO.prototype.map = function(f) {\n    return new IO(compose(f, this.__value))\n};\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("import _ from 'lodash';\nvar compose = _.flowRight;\nclass IO extends Monad{\n    map(f){\n        return IO.of(compose(f, this.__value))\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var fs = require('fs');\nvar readFile = function(filename) {\n    return new IO(function() {\n        return fs.readFileSync(filename, 'utf-8');\n    });\n};\nreadFile('./user.txt')\n    .flatMap(tail)\n    .flatMap(print)\n// 等同于\nreadFile('./user.txt')\n    .chain(tail)\n    .chain(print)\n")])])]),n("p",[a._v("我们先后提到了 Maybe、Either、IO 这三种强大的 Functor，在链式调用、惰性求值、错误捕获、输入输出中都发挥着巨大的作用。事实上 Functor 远不止这三种。"),n("br"),a._v("\n但依然有问题困扰着我们：")]),n("ol",[n("li",[a._v("如何处理嵌套的 Functor 呢？（比如 Maybe(IO(42))）")]),n("li",[a._v("如何处理一个由非纯的或者异步的操作序列呢？")])]),n("p",[a._v("图4")]),n("p",[a._v("数据类型"),n("br"),a._v("\n数据类型就是对值的一种封装，不仅包括值本身，还包括相关的属性和方法。2就不是一个单纯的值，而是一种数据类型的实例，只能在数据类型的场景（context）中使用。\n图5"),n("br"),a._v("\n图6"),n("br"),a._v("\n图7"),n("br"),a._v("\n13、Monad")]),n("ul",[n("li",[a._v("Monad就是一种设计模式，表示将一个运算过程，通过函数拆解成互相连接的多个步骤。你只要提供下一步运算所需的函数，整个运算就会自动进行下去。")]),n("li",[a._v("Promise 就是一种 Monad。")]),n("li",[a._v("Monad让我们避开了嵌套地狱，可以轻松地进行深度嵌套的函数式编程，比如IO和其它异步任务。")])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Maybe.of(\n    Maybe.of(\n        Maybe.of({name:\t'Mulburry',\tnumber:\t8402})\n    )\n)\nclass Monad\textends\tFunctor\t{\n    join()\t{\n        return this.val;\n    }\n    flatMap(f)\t{\n        return\tthis.map(f).join();\t\n    }\n}\n")])])]),n("p",[a._v("Monad函⼦的作⽤是，总是返回⼀个单层的函⼦。它有⼀个flatMap⽅法，与map⽅法作⽤相同，唯⼀的区别是如果⽣成了⼀个嵌套函⼦，它会取出后者内部的值，保证返回的永远是⼀个单层的容器，不会出现嵌套的情况。"),n("br"),a._v("\n如果函数f返回的是⼀个函⼦，那么this.map(f)就会⽣成⼀个嵌套的函⼦。所以， join⽅法保证了flatMap⽅法总是返回⼀个单层的函⼦。这意味着嵌套的函⼦会被铺平（ flatten）。")]),n("h2",{attrs:{id:"当下函数式编程最热的库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#当下函数式编程最热的库","aria-hidden":"true"}},[a._v("#")]),a._v(" 当下函数式编程最热的库")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("1.RxJS\n2.cycleJS\n3.lodashJS、lazy(惰性求值)\n4.underscoreJS\n5.ramdajs\n")])])]),n("h3",{attrs:{id:"rxjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rxjs","aria-hidden":"true"}},[a._v("#")]),a._v(" RxJS")]),n("p",[a._v("图8"),n("br"),a._v("\nRxjs 从诞生以来一直都不温不火，但它函数响应式编程（Functional Reactive Programming，FRP）的理念非常先进，虽然或许对于大部分应用环境来说，外部输入事件并不是太频繁，并不需要引入一个如此庞大的 FRP 体系，但我们也可以了解一下它有哪些优秀的特性  在 Rxjs 中，所有的外部输入（用户输入、网络请求等等）都被视作一种 『事件流』："),n("br"),a._v("\n用户点击了按钮 --\x3e 网络请求成功 --\x3e 用户键盘输入 --\x3e 某个定时事件发生 —> 这种事件流特别适合处理游戏，上上下下上上下下"),n("br"),a._v("\n举个最简单的例子，下面这段代码会监听点击事件，每 2 次点击事件产生一次事件响应：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var clicks = Rx.Observable\n.fromEvent(document, 'click')\n.bufferCount(2)\n.subscribe(x => console.log(x)); // 打印出前2次点击事件\n")])])]),n("p",[a._v("响应式编程是继承自函数式编程，声明式的，不可变的，没有副作用的是函数式编程的三大护法。其中不可变武功最高深。一直使用面向对象范式编程的我们，习惯了用变量存储和追踪程序的状态。RxJS从函数式编程范式中借鉴了很多东西，比如链式函数调用，惰性求值等等。"),n("br"),a._v("\n在函数中与函数作用域之外的一切事物有交互的就产生了副作用。比如读写文件，在控制台打印语句，修改页面元素的css等等。在RxJS中，把副作用问题推给了订阅者来解决。")]),n("h3",{attrs:{id:"cyclejs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cyclejs","aria-hidden":"true"}},[a._v("#")]),a._v(" cycleJS")]),n("p",[a._v("Cycle.js 是一个基于 Rxjs 的框架，它是一个彻彻底底的 FRP 理念的框架，和 React 一样支持 virtual DOM、JSX 语法，但现在似乎还没有看到大型的应用经验。"),n("br"),a._v("\n本质的讲，它就是在 Rxjs 的基础上加入了对 virtual DOM、容器和组件的支持，比如下面就是一个简单的『开关』按钮：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("function main(sources) {\n    const sinks = {\n        DOM: sources.DOM.select('input').events('click')\n        .map(ev => ev.target.checked)\n        .startWith(false)\n        .map(toggled =>\n        <div>\n            <input type=\"checkbox\" /> Toggle me\n            <p>{toggled ? 'ON' : 'off'}</p>\n        </div>\n    )\n};\nreturn sinks;\n}\nconst drivers = {\nDOM: makeDOMDriver('#app')\n};\nrun(main, drivers);\n")])])]),n("h3",{attrs:{id:"lodashjs、lazy-惰性求值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lodashjs、lazy-惰性求值","aria-hidden":"true"}},[a._v("#")]),a._v(" lodashJS、lazy(惰性求值)")]),n("p",[a._v("lodashJS"),n("br"),a._v("\nlodash是一个具有一致接口、模块化、高性能等特性的JavaScript工具库，是underscore.js的fork，其最初目标也是“一致的跨浏览器行为。。。，并改善性能”。"),n("br"),a._v("\nlodash采用延迟计算，意味着我们的链式方法在显式或者隐式的value()调用之前是不会执行的，因此lodash可以进行shortcut（捷径） fusion（融合）这样的优化，通过合并链式大大降低迭代的次数，从而大大提升其执行性能。"),n("br"),a._v("\n就如同jQuery在全部函数前加全局的$一样，lodash使用全局的_来提供对工具的快速访问。")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("var abc = function(a, b, c) {\n    return [a, b, c];\n};\nvar curried = _.curry(abc);\ncurried(1)(2)(3);\nfunction square(n) {\n    return n * n;\n}\nvar addSquare = _.flowRight(square, _.add);\naddSquare(1, 2);\n// => 9\n")])])]),n("h3",{attrs:{id:"underscorejs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#underscorejs","aria-hidden":"true"}},[a._v("#")]),a._v(" underscoreJS")]),n("p",[a._v("Underscore 是一个 JavaScript 工具库，它提供了一整套函数式编程的实用功能，但是没有扩展任何 JavaScript 内置对象。 他解决了这个问题：“如果我面对一个空白的 HTML 页面，并希望立即开始工作，我需要什么？” 他弥补了 jQuery 没有实现的功能，同时又是 Backbone 必不可少的部分。"),n("br"),a._v("\nUnderscore 提供了100多个函数，包括常用的：map、filter、invoke——当然还有更多专业的辅助函数，如：函数绑定、JavaScript 模板功能、创建快速索引、强类型相等测试等等。")]),n("h3",{attrs:{id:"ramdajs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ramdajs","aria-hidden":"true"}},[a._v("#")]),a._v(" ramdajs")]),n("p",[a._v("ramda是一个非常优秀的js工具库，跟同类比 更函数式主要体现在以下几个原则")]),n("ul",[n("li",[a._v("ramda里面的提供的函数全部都是curry的 意味着函数没有默认参\n数可选参数从而减轻认知函数的难度。")]),n("li",[a._v("ramda推崇pointfree简单的说是使用简单函数组合实现一个复杂\n功能，而不是单独写一个函数操作临时变量。")]),n("li",[a._v("ramda有个非常好用的参数占位符 R._ 大大减轻了函数在pointfree过程中参数位置的问题")])]),n("p",[a._v("相比underscore/lodash 感觉要干净很多。")]),n("h2",{attrs:{id:"函数式编程的实际应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程的实际应用场景","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数式编程的实际应用场景")]),n("h3",{attrs:{id:"易调试、热部署、并发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#易调试、热部署、并发","aria-hidden":"true"}},[a._v("#")]),a._v(" 易调试、热部署、并发")]),n("ul",[n("li",[a._v("函数式编程中的每个符号都是 const 的，于是没有什么函数会有副作用。谁也不能在运行时修改任何东西，也没有函数可以修改在它的作用域之外修改什么值给其他函数继续使用。这意味着决定函数执行结果的唯一因素就是它的返回值，而影响其返回值的唯一因素就是它的参数。")]),n("li",[a._v('函数式编程不需要考虑”死锁"（deadlock），因为它不修改变量，所以根本不存在"锁"线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署"并发编程"（concurrency）。')]),n("li",[a._v("函数式编程中所有状态就是传给函数的参数，而参数都是储存在栈上的。这一特性让软件的热部署变得十分简单。只要比较一下正在运行的代码以及新的代码获得一个diff，然后用这个diff更新现有的代码，新代码的热部署就完成了。")])]),n("h3",{attrs:{id:"单元测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单元测试","aria-hidden":"true"}},[a._v("#")]),a._v(" 单元测试")]),n("ul",[n("li",[a._v("严格函数式编程的每一个符号都是对直接量或者表达式结果的引用，没有函数产生副作用。因为从未在某个地方修改过值，也没有函数修改过在其作用域之外的量并被其他函数使用（如类成员或全局变量）。这意味着函数求值的结果只是其返回值，而惟一影响其返回值的就是函数的参数。")]),n("li",[a._v("这是单元测试者的梦中仙境(wet dream)。对被测试程序中的每个函数，你只需在意其参数，而不必考虑函数调用顺序，不用谨慎地设置外部状态。所有要做的就是传递代表了边际情况的参数。如果程序中的每个函数都通过了单元测试，你就对这个软件的质量有了相当的自信。而命令式编程就不能这样乐观了，在 Java 或 C++ 中只检查函数的返回值还不够——我们还必须验证这个函数可能修改了的外部状态。")])]),n("h3",{attrs:{id:"小结与补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结与补充","aria-hidden":"true"}},[a._v("#")]),a._v(" 小结与补充")]),n("p",[a._v("函数式编程不应被视为灵丹妙药。相反，它应该被视为我们现有工具箱的一个很自然的补充——它带来了更高的可组合性，灵活性以及容错性。现代的JavaScript库已经开始尝试拥抱函数式编程的概念以获取这些优势。Redux 作为一种 FLUX的变种实现，核心理念也是状态机和函数式编程。")]),n("p",[a._v("我们本节课介绍了纯函数、柯里化、Point Free、声明式代码和命令式代码的区别，只要记住『函数对于外部状态的依赖是造成系统复杂性大大提高的主要原因』以及『让函数尽可能地纯净』就行了。")]),n("p",[a._v("然后介绍了『容器』的概念和 Maybe、Either、IO 这三个强大的 Functor。是的，大多数人或许都没有机会在生产环境中自己去实现这样的玩具级 Functor，但通过了解它们的特性会让你产生对于函数式编程的意识。")]),n("p",[a._v("软件工程上讲『没有银弹』，函数式编程同样也不是万能的，它与烂大街的 OOP一样，只是一种编程范式而已。很多实际应用中是很难用函数式去表达的，选择OOP 亦或是其它编程范式或许会更简单。但我们要注意到函数式编程的核心理念，如果说 OOP 降低复杂度是靠良好的封装、继承、多态以及接口定义的话，那么函数式编程就是通过纯函数以及它们的组合、柯里化、Functor 等技术来降低系统复杂度，而 React、Rxjs、Cycle.js 正是这种理念的代言。让我们一起拥抱函数式编程，打开你程序的大门！")])])}],!1,null,null,null);t.default=r.exports}}]);